# REVOLUTIONARY PROMPT: Build Lisan - The Linguistic Truth Engine for Islam

## 🌍 VISION STATEMENT

Build a **game-changing platform** that will serve **billions of Muslims for centuries to come** by restoring linguistic accuracy, scholarly depth, and intellectual honesty to Islamic texts. This is not just a website — it's a **digital preservation of Islamic scholarship** combined with cutting-edge data science, creating an indestructible record of truth that future generations can trust.

**Core Mission**: Protect the Qur'an and authentic Islamic knowledge from:
- Shallow translations that strip away meaning
- Viral misinformation and fabricated hadiths
- Bad-faith criticism based on linguistic ignorance
- Loss of classical scholarship in the digital age

**Revolutionary Approach**: Combine:
- 1,400 years of Islamic scholarship (tafsir, hadith science, Arabic linguistics)
- Modern data science (NLP, statistical analysis, machine learning)
- Beautiful, intuitive design (accessible to scholars AND casual learners)
- Open, verifiable methodology (build trust through transparency)

---

## 🎨 VISUAL & THEMATIC DESIGN SYSTEM

### **Islamic Aesthetic Philosophy**

**Inspiration**: Blend the elegance of classical Islamic manuscripts with modern data visualization

**Core Principles**:
1. **Sacred Reverence** — Every design choice honors the text
2. **Geometric Harmony** — Islamic patterns create visual rhythm
3. **Calligraphic Beauty** — Arabic text is art, not just data
4. **Analytical Clarity** — Complex data presented with elegance
5. **Timeless Design** — Will look relevant in 2025 and 2125

---

### **Extended Color Palette**

```css
:root {
  /* Primary Brand Colors */
  --quran-green: #0F5F4E;        /* Deep emerald - represents growth, knowledge */
  --hadith-burgundy: #8B1538;     /* Deep red - represents authenticity */
  --scholar-gold: #D4AF37;        /* Classical gold - represents illumination */
  --truth-blue: #1E4D7B;          /* Deep blue - represents depth of knowledge */
  
  /* Background & Surface */
  --parchment-cream: #FAF9F6;     /* Main background - manuscript feel */
  --manuscript-beige: #F5F0E8;    /* Card backgrounds */
  --aged-paper: #E8E3D8;          /* Subtle contrast areas */
  
  /* Accent Colors */
  --verified-green: #10B981;      /* Sahih hadith, correct analysis */
  --caution-amber: #F59E0B;       /* Hasan hadith, debated topics */
  --warning-red: #EF4444;         /* Mawdu hadith, errors */
  --insight-purple: #8B5CF6;      /* AI insights, patterns */
  
  /* Text Hierarchy */
  --text-primary: #1A1A1A;        /* Main text */
  --text-secondary: #4B5563;      /* Supporting text */
  --text-tertiary: #9CA3AF;       /* Metadata, labels */
  
  /* Data Visualization */
  --data-blue: #3B82F6;
  --data-teal: #14B8A6;
  --data-purple: #A855F7;
  --data-orange: #F97316;
  --data-pink: #EC4899;
  
  /* Gradient Overlays */
  --gradient-hero: linear-gradient(135deg, var(--quran-green) 0%, var(--truth-blue) 100%);
  --gradient-data: linear-gradient(135deg, var(--data-blue) 0%, var(--data-purple) 100%);
  --gradient-sacred: radial-gradient(circle at center, var(--scholar-gold) 0%, transparent 70%);
}

[data-theme="dark"] {
  --parchment-cream: #0A0A0A;
  --manuscript-beige: #1A1A1A;
  --aged-paper: #2D2D2D;
  --text-primary: #F5F5F5;
  --text-secondary: #D1D5DB;
  --text-tertiary: #6B7280;
  --quran-green: #14A085;
  --scholar-gold: #FCD34D;
}
```

---

### **Typography System**

```css
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Amiri+Quran&family=Scheherazade+New:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Crimson+Pro:wght@300;400;600;700&family=Inter:wght@300;400;500;600;700;800&display=swap');
@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;600&display=swap');

/* Arabic Typography */
.quran-text {
  font-family: 'Amiri Quran', serif;
  font-size: clamp(28px, 4vw, 42px);
  line-height: 2.2;
  letter-spacing: 0.02em;
  direction: rtl;
  text-align: right;
  color: var(--text-primary);
  font-weight: 400;
}

.hadith-text {
  font-family: 'Scheherazade New', serif;
  font-size: clamp(20px, 3vw, 28px);
  line-height: 1.9;
  direction: rtl;
}

.arabic-interface {
  font-family: 'Scheherazade New', serif;
  font-size: 18px;
}

/* English Typography */
.heading-display {
  font-family: 'Crimson Pro', serif;
  font-weight: 700;
  letter-spacing: -0.02em;
}

.heading-section {
  font-family: 'Crimson Pro', serif;
  font-weight: 600;
}

.body-text {
  font-family: 'Inter', sans-serif;
  font-size: 17px;
  line-height: 1.7;
  font-weight: 400;
}

.data-label {
  font-family: 'Inter', sans-serif;
  font-size: 14px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.code-mono {
  font-family: 'IBM Plex Mono', monospace;
  font-size: 14px;
}

/* Hierarchy Scale */
.text-hero { font-size: clamp(48px, 8vw, 96px); }
.text-h1 { font-size: clamp(36px, 6vw, 64px); }
.text-h2 { font-size: clamp(28px, 4vw, 48px); }
.text-h3 { font-size: clamp(24px, 3vw, 36px); }
.text-h4 { font-size: clamp(20px, 2.5vw, 28px); }
.text-body-lg { font-size: 19px; }
.text-body { font-size: 17px; }
.text-body-sm { font-size: 15px; }
.text-caption { font-size: 13px; }
```

---

### **Islamic Geometric Pattern System**

Create **custom SVG patterns** for backgrounds and borders:

```javascript
// components/IslamicPatterns.tsx
export const StarPattern = () => (
  <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <pattern id="islamic-star" x="0" y="0" width="120" height="120" patternUnits="userSpaceOnUse">
        <path 
          d="M60 0 L70 40 L110 40 L80 65 L90 105 L60 80 L30 105 L40 65 L10 40 L50 40 Z" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="0.5" 
          opacity="0.08"
        />
        <circle cx="60" cy="60" r="5" fill="currentColor" opacity="0.05" />
      </pattern>
    </defs>
    <rect width="100%" height="100%" fill="url(#islamic-star)" />
  </svg>
);

export const GeometricTessellation = () => (
  <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <pattern id="tessellation" x="0" y="0" width="80" height="80" patternUnits="userSpaceOnUse">
        <polygon 
          points="40,0 80,40 40,80 0,40" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="0.5" 
          opacity="0.06"
        />
        <circle cx="40" cy="40" r="15" fill="none" stroke="currentColor" strokeWidth="0.5" opacity="0.04" />
      </pattern>
    </defs>
    <rect width="100%" height="100%" fill="url(#tessellation)" />
  </svg>
);

// Usage in components:
<div className="relative">
  <div className="absolute inset-0 opacity-30">
    <StarPattern />
  </div>
  <div className="relative z-10">
    {/* Content here */}
  </div>
</div>
```

---

## 📊 REVOLUTIONARY DATA VISUALIZATION FEATURES

### **1. Word Usage Timeline (Historical Semantic Evolution)**

Show how a word's meaning evolved across 1,400 years of Islamic scholarship:

```typescript
// components/SemanticTimeline.tsx
interface TimelineData {
  century: number; // 1 = 7th century (1 AH)
  scholars: string[];
  interpretation: string;
  dominantMeaning: string;
  percentage: number; // % of scholars who held this view
}

export function SemanticTimeline({ word, data }: Props) {
  return (
    <div className="relative py-12">
      <h3 className="text-h3 mb-8">📜 Semantic Evolution Across 14 Centuries</h3>
      
      {/* Timeline Axis */}
      <div className="relative h-96 bg-gradient-to-r from-aged-paper via-manuscript-beige to-aged-paper rounded-xl p-8">
        
        {/* Vertical Timeline */}
        <div className="absolute left-12 top-8 bottom-8 w-1 bg-scholar-gold"></div>
        
        {data.map((era, idx) => (
          <div 
            key={era.century}
            className="relative flex items-center gap-6 mb-8"
            style={{ 
              opacity: 0.3 + (idx * 0.7 / data.length),
              transform: `translateX(${idx * 20}px)` 
            }}
          >
            {/* Timeline Dot */}
            <div className="relative z-10">
              <div className="w-8 h-8 rounded-full bg-scholar-gold flex items-center justify-center text-white font-bold text-sm">
                {era.century}
              </div>
            </div>
            
            {/* Era Card */}
            <div className="flex-1 bg-white rounded-lg p-6 shadow-md border-l-4 border-scholar-gold">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-bold text-scholar-gold">
                  {getCenturyLabel(era.century)}
                </span>
                <span className="text-xs bg-scholar-gold/20 px-3 py-1 rounded-full">
                  {era.percentage}% consensus
                </span>
              </div>
              
              <p className="font-bold text-lg mb-2">"{era.dominantMeaning}"</p>
              
              <p className="text-sm text-text-secondary mb-3">
                {era.interpretation}
              </p>
              
              <div className="flex flex-wrap gap-2">
                {era.scholars.slice(0, 3).map(scholar => (
                  <span key={scholar} className="text-xs bg-parchment-cream px-2 py-1 rounded">
                    {scholar}
                  </span>
                ))}
                {era.scholars.length > 3 && (
                  <span className="text-xs text-text-tertiary">
                    +{era.scholars.length - 3} more
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {/* Modern AI Insight */}
      <div className="mt-8 p-6 bg-gradient-to-r from-insight-purple/10 to-data-blue/10 rounded-xl border-2 border-insight-purple/30">
        <div className="flex items-start gap-4">
          <span className="text-4xl">🤖</span>
          <div>
            <h4 className="font-bold text-lg mb-2">AI Pattern Recognition</h4>
            <p className="text-sm">
              Analysis of {data.length} centuries of tafsir shows a <strong>gradual shift</strong> from 
              literal to metaphorical interpretation starting in the {data[Math.floor(data.length/2)].century}th century, 
              correlating with increased urbanization and philosophical discourse in Islamic civilization.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

### **2. Grammar Pattern Heat Map**

Visual representation of how words behave in different grammatical contexts:

```typescript
// components/GrammarHeatMap.tsx
interface GrammarPattern {
  context: string; // 'followed_by_person', 'followed_by_object', 'with_preposition', etc.
  meanings: {
    meaning: string;
    occurrences: number;
  }[];
}

export function GrammarHeatMap({ word, patterns }: Props) {
  return (
    <div className="my-12">
      <h3 className="text-h3 mb-8">🔥 Grammar Context Heat Map</h3>
      
      <div className="bg-white rounded-xl shadow-lg p-8">
        <table className="w-full">
          <thead>
            <tr className="border-b-2 border-aged-paper">
              <th className="text-left py-4 px-4 font-bold">Context</th>
              {/* Get all unique meanings */}
              {Array.from(new Set(patterns.flatMap(p => p.meanings.map(m => m.meaning)))).map(meaning => (
                <th key={meaning} className="text-center py-4 px-2 text-sm font-bold">
                  {meaning}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {patterns.map((pattern, idx) => (
              <tr key={idx} className="border-b border-aged-paper/50">
                <td className="py-4 px-4 font-semibold text-sm">
                  {formatContext(pattern.context)}
                </td>
                {Array.from(new Set(patterns.flatMap(p => p.meanings.map(m => m.meaning)))).map(meaningName => {
                  const meaningData = pattern.meanings.find(m => m.meaning === meaningName);
                  const occurrences = meaningData?.occurrences || 0;
                  const maxOccurrences = Math.max(...patterns.flatMap(p => p.meanings.map(m => m.occurrences)));
                  const intensity = occurrences / maxOccurrences;
                  
                  return (
                    <td key={meaningName} className="text-center py-4 px-2">
                      <div 
                        className="mx-auto w-12 h-12 rounded flex items-center justify-center font-bold text-sm transition-all hover:scale-110 cursor-pointer"
                        style={{
                          backgroundColor: `rgba(212, 175, 55, ${intensity})`,
                          color: intensity > 0.5 ? 'white' : 'var(--text-primary)'
                        }}
                        title={`${occurrences} occurrences`}
                      >
                        {occurrences > 0 ? occurrences : '—'}
                      </div>
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
        
        {/* Legend */}
        <div className="mt-6 flex items-center gap-4 text-sm">
          <span className="font-semibold">Intensity:</span>
          <div className="flex items-center gap-2">
            {[0.2, 0.4, 0.6, 0.8, 1.0].map(intensity => (
              <div key={intensity} className="flex items-center gap-1">
                <div 
                  className="w-6 h-6 rounded"
                  style={{ backgroundColor: `rgba(212, 175, 55, ${intensity})` }}
                />
                <span className="text-xs text-text-tertiary">{Math.round(intensity * 100)}%</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

### **3. Scholarly Consensus Visualization**

Show agreement/disagreement across different schools of thought:

```typescript
// components/ScholarlyConsensusChart.tsx
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

interface ScholarlyView {
  interpretation: string;
  schoolsOfThought: string[]; // 'Hanafi', 'Maliki', 'Shafi', 'Hanbali', 'Jafari', 'Ibadi', etc.
  percentage: number;
  keyScholars: string[];
}

export function ScholarlyConsensusChart({ word, views }: Props) {
  const COLORS = {
    'majority': '#10B981',
    'significant_minority': '#F59E0B',
    'minority': '#EF4444',
    'modern_reformist': '#8B5CF6'
  };
  
  return (
    <div className="my-12 bg-gradient-to-br from-manuscript-beige to-parchment-cream rounded-xl p-8">
      <h3 className="text-h3 mb-8">⚖️ Scholarly Consensus Analysis</h3>
      
      <div className="grid md:grid-cols-2 gap-8">
        {/* Pie Chart */}
        <div>
          <ResponsiveContainer width="100%" height={400}>
            <PieChart>
              <Pie
                data={views.map(v => ({ name: v.interpretation, value: v.percentage }))}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                outerRadius={120}
                fill="#8884d8"
                dataKey="value"
              >
                {views.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={COLORS[getCategoryFromPercentage(entry.percentage)]} 
                  />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>
        
        {/* Detailed Breakdown */}
        <div className="space-y-4">
          {views.map((view, idx) => (
            <div key={idx} className="bg-white rounded-lg p-4 border-l-4" style={{ 
              borderColor: COLORS[getCategoryFromPercentage(view.percentage)] 
            }}>
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-bold text-lg">{view.interpretation}</h4>
                <span className="text-2xl font-bold" style={{ 
                  color: COLORS[getCategoryFromPercentage(view.percentage)] 
                }}>
                  {view.percentage}%
                </span>
              </div>
              
              <div className="mb-3">
                <span className="text-xs font-semibold text-text-tertiary uppercase tracking-wide">
                  Schools of Thought:
                </span>
                <div className="flex flex-wrap gap-2 mt-1">
                  {view.schoolsOfThought.map(school => (
                    <span key={school} className="text-xs bg-aged-paper px-2 py-1 rounded">
                      {school}
                    </span>
                  ))}
                </div>
              </div>
              
              <div>
                <span className="text-xs font-semibold text-text-tertiary uppercase tracking-wide">
                  Key Scholars:
                </span>
                <p className="text-sm mt-1">
                  {view.keyScholars.slice(0, 3).join(', ')}
                  {view.keyScholars.length > 3 && ` +${view.keyScholars.length - 3} more`}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Consensus Strength Indicator */}
      <div className="mt-8 p-4 bg-white rounded-lg border-2 border-scholar-gold">
        <div className="flex items-center gap-3">
          <span className="text-3xl">📊</span>
          <div>
            <span className="font-bold">Consensus Strength:</span>
            <span className="ml-2">
              {views[0].percentage > 75 ? '🟢 Strong Majority' :
               views[0].percentage > 50 ? '🟡 Moderate Consensus' :
               '🔴 Significant Disagreement'}
            </span>
            <p className="text-sm text-text-secondary mt-1">
              {views[0].percentage > 75 
                ? 'Over 75% of classical scholars agree on this interpretation'
                : views[0].percentage > 50
                ? 'Majority view, but with notable minority opinions'
                : 'No clear consensus - requires deeper contextual analysis'}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

### **4. Hadith Reliability Network Graph**

Visual network showing chain of narration (isnad) strength:

```typescript
// components/IsnadNetworkGraph.tsx
import { useEffect, useRef } from 'react';
import * as d3 from 'd3';

interface Narrator {
  id: string;
  name: string;
  reliability: 'thiqa' | 'saduq' | 'daif' | 'matruk'; // trustworthy, truthful, weak, abandoned
  generation: number; // 1 = Companions, 2 = Tabi'un, etc.
}

interface Transmission {
  from: string;
  to: string;
  reliability: 'sahih' | 'hasan' | 'daif';
}

export function IsnadNetworkGraph({ hadithId, narrators, transmissions }: Props) {
  const svgRef = useRef<SVGSVGElement>(null);
  
  useEffect(() => {
    if (!svgRef.current) return;
    
    const width = 800;
    const height = 600;
    
    // Clear previous graph
    d3.select(svgRef.current).selectAll('*').remove();
    
    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height);
    
    // Create force simulation
    const simulation = d3.forceSimulation(narrators)
      .force('link', d3.forceLink(transmissions).id((d: any) => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('x', d3.forceX(width / 2).strength(0.1))
      .force('y', d3.forceY((d: any) => (d.generation * 100)).strength(0.5));
    
    // Draw links (transmissions)
    const link = svg.append('g')
      .selectAll('line')
      .data(transmissions)
      .enter().append('line')
      .attr('stroke', d => {
        return d.reliability === 'sahih' ? '#10B981' :
               d.reliability === 'hasan' ? '#F59E0B' : '#EF4444';
      })
      .attr('stroke-width', 3)
      .attr('stroke-opacity', 0.6);
    
    // Draw nodes (narrators)
    const node = svg.append('g')
      .selectAll('g')
      .data(narrators)
      .enter().append('g')
      .call(d3.drag<any, any>()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));
    
    node.append('circle')
      .attr('r', 20)
      .attr('fill', d => {
        return d.reliability === 'thiqa' ? '#10B981' :
               d.reliability === 'saduq' ? '#F59E0B' :
               d.reliability === 'daif' ? '#EF4444' : '#991B1B';
      })
      .attr('stroke', '#fff')
      .attr('stroke-width', 2);
    
    node.append('text')
      .text(d => d.name.split(' ')[0]) // First name only
      .attr('text-anchor', 'middle')
      .attr('dy', 40)
      .attr('font-size', '12px')
      .attr('font-weight', 'bold')
      .attr('fill', '#1A1A1A');
    
    // Update positions on tick
    simulation.on('tick', () => {
      link
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);
      
      node.attr('transform', (d: any) => `translate(${d.x},${d.y})`);
    });
    
    function dragstarted(event: any) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }
    
    function dragged(event: any) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }
    
    function dragended(event: any) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  }, [narrators, transmissions]);
  
  return (
    <div className="my-12 bg-white rounded-xl p-8 shadow-lg">
      <h3 className="text-h3 mb-4">🔗 Chain of Narration (Isnad) Network</h3>
      <p className="text-sm text-text-secondary mb-6">
        Interactive graph showing the transmission chain. Green = trustworthy, Yellow = acceptable, Red = weak.
      </p>
      
      <div className="border-2 border-aged-paper rounded-lg overflow-hidden">
        <svg ref={svgRef}></svg>
      </div>
      
      {/* Legend */}
      <div className="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded-full bg-green-500"></div>
          <span>Thiqa (Trustworthy)</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded-full bg-yellow-500"></div>
          <span>Saduq (Truthful)</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded-full bg-red-500"></div>
          <span>Daif (Weak)</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 rounded-full bg-red-900"></div>
          <span>Matruk (Abandoned)</span>
        </div>
      </div>
    </div>
  );
}
```

---

### **5. Comparative Translation Divergence Analyzer**

Show WHERE translations differ and WHY:

```typescript
// components/TranslationDivergenceAnalyzer.tsx
interface TranslationSegment {
  arabicWord: string;
  position: number;
  translations: {
    translator: string;
    rendering: string;
    literalMeaning: string;
    interpretiveChoice: boolean;
  }[];
  divergenceScore: number; // 0-100, how much translators disagree
  linguisticNotes: string;
}

export function TranslationDivergenceAnalyzer({ verseRef, segments }: Props) {
  return (
    <div className="my-12">
      <h3 className="text-h3 mb-8">🔀 Translation Divergence Analysis</h3>
      
      <div className="bg-white rounded-xl p-8 shadow-lg">
        {segments.map((segment, idx) => (
          <div key={idx} className="mb-8 pb-8 border-b border-aged-paper last:border-b-0">
            {/* Arabic Word */}
            <div className="flex items-center justify-between mb-4">
              <div>
                <span className="quran-text text-4xl">{segment.arabicWord}</span>
                <span className="ml-4 text-sm text-text-tertiary">
                  Position {segment.position} in verse
                </span>
              </div>
              
              {/* Divergence Score */}
              <div className="text-right">
                <div className="text-xs font-semibold text-text-tertiary uppercase mb-1">
                  Divergence Score
                </div>
                <div className={`text-3xl font-bold ${
                  segment.divergenceScore > 70 ? 'text-red-500' :
                  segment.divergenceScore > 40 ? 'text-yellow-500' :
                  'text-green-500'
                }`}>
                  {segment.divergenceScore}%
                </div>
              </div>
            </div>
            
            {/* Translation